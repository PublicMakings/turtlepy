import turtle
from turtlelibs import *
import canvasvg
import time
import string
import os
import signal
#make pens & configure their settings, set screen height/width and related varibles
t1 = turtle.Turtle()
t2 = turtle.Turtle()
t3 = turtle.Turtle()
t4 = turtle.Turtle()
t5 = turtle.Turtle()
turtle.bgcolor('white')
length=5
t1.speed(0)
t1.ht()
t1.pensize(1)


t2.speed(0)
t2.ht()
t2.pensize(1)
t3.speed(0)
t3.ht()
t3.pensize(1)
t4.speed(0)
t4.ht()
t4.pensize(1)
t5.speed(0)
t5.ht()
t5.pensize(1)




##dual monitors resolution, only mess with resX and resY
resX = 3840
resY = 1080
resXhigh = resX / 2.0
resYhigh = resY / 2.0
resXlow = resXhigh * -1
resYlow = resYhigh * -1
setscreens(turtle, resX, resY)
counter = 1

#makes background black in exported image, move all to center, pick 5 numbers to be used as colors
t1.fillcolor('black')
#print resXlow, resXhigh, resYlow, resYhigh
moveto(t1,resXlow + -500,resYhigh + 250,270)
t1.begin_fill()
print (t1.xcor(), t1.ycor())
t1.forward(resYhigh + 1040)
print (t1.xcor(), t1.ycor())
t1.left(90)
t1.forward(resX + 1000)
print (t1.xcor(), t1.ycor())
t1.left(90)
t1.forward(resYhigh + 1040)
print (t1.xcor(), t1.ycor())
t1.left(90)
t1.forward(resX + 1000)
print (t1.xcor(), t1.ycor())
t1.end_fill()
moveto(t1,0,0,0)
moveto(t2,0,0,0)
moveto(t3,0,0,0)
moveto(t4,0,0,0)
moveto(t5,0,0,0)
colorchart = [random.randrange(1,30),random.randrange(1,30),random.randrange(1,30),random.randrange(1,30),random.randrange(1,30)]

#singlecolor is a custom function from turtlelibs that picks one of 30 colors that fit together reasonably well
singlecolor(t1, colorchart[0])
singlecolor(t2, colorchart[1])
singlecolor(t3, colorchart[2])
singlecolor(t4, colorchart[3])
singlecolor(t5, colorchart[4])


#generate a bunch of random letters to use as a seed
newseed = []
def pickseed():
    seed = []
    count = 1
    totallength = random.randrange(3,15)
    while count <= totallength:
        randomx = random.choice(string.ascii_letters.lower())
        seed += str(randomx)
        count += 1
    print seed
    return seed
    

#picks a random set of moves based off the seed above
def pickrandom(x, length, degrees, seed):
    for numb in seed:
        if numb == "a":
            x.forward(length)
        elif numb == "b":
            x.left(degrees)
        elif numb == "c":
            x.right(degrees)
        elif numb == "d":
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
        elif numb == "e":
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
        elif numb == "f":
            x.forward(length)
            x.right(degrees)
            x.forward(length*2)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward((length*2) + (length*2))
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length*2)
            x.left(degrees)
        elif numb == "g":
            x.forward(length)
            x.forward(length)
            x.forward(length)
        elif numb == "h":
            x.forward(length*-1)
        elif numb == "i":
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            length += 1
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            length += 1
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            length += 1
        elif numb == "j":
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.pu()
            x.right(180)
            x.forward(length*6)
            x.right(180)
            x.pd()
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.pu()
            x.right(180)
            x.forward(length*6)
            x.right(180)
            x.pd()
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
        elif numb == "k":
            x.forward(length*3)
        elif numb == "l":
            x.right(180)
            x.forward(length)
        elif numb == "m":
            x.forward(length)
        elif numb == "n":
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
        elif numb == "o":
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
        elif numb == "p":
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
        elif numb == "q":
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            length += 2
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            length += 2
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.right(degrees)
            length += 2
        elif numb == "r":
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            length += 1
            x.right(180)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            length += 1
            x.right(180)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            length += 1
        elif numb == "s":
            x.forward(length)
            x.left(90)
            x.forward(length)
            x.left(90)
            x.forward(length)
            x.left(90)
            x.forward(length)
            x.left(90)
            x.forward(length)
            x.right(90)
            x.forward(length)
            x.right(90)
            x.forward(length)
            x.right(90)
            x.forward(length)
            x.right(90)
            x.forward(length)
            x.right(180)
            x.forward(length)
            x.left(90)
            x.forward(length)
            x.left(90)
            x.forward(length)
            x.left(90)
            x.forward(length)
            x.left(90)
            x.forward(length)
            x.right(90)
            x.forward(length)
            x.right(90)
            x.forward(length)
            x.right(90)
            x.forward(length)
            x.right(90)
            x.forward(length)
        elif numb == "t":
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.pu()
            x.right(180)
            x.forward(length*6)
            x.right(180)
            x.pd()
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.pu()
            x.right(180)
            x.forward(length*6)
            x.right(180)
            x.pd()
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
        elif numb == "t":
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.pu()
            x.right(90)
            x.forward(length*6)
            x.left(90)
            x.pd()
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.pu()
            x.right(90)
            x.forward(length*6)
            x.left(90)
            x.pd()
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.pu()
            x.right(90)
            x.forward(length*6)
            x.left(90)
            x.pd()
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.pu()
            x.right(90)
            x.forward(length*6)
            x.left(90)
            x.pd()
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
        elif numb == "u":
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.pu()
            x.right(90)
            x.forward(length*6)
            x.left(90)
            x.pd()
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.pu()
            x.right(90)
            x.forward(length*6)
            x.left(90)
            x.pd()
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.pu()
            x.right(90)
            x.forward(length*6)
            x.left(90)
            x.pd()
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.pu()
            x.right(90)
            x.forward(length*6)
            x.left(90)
            x.pd()
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)
            x.right(degrees)
            x.forward(length)
            x.left(degrees)
            x.forward(length)             
        else:
            pass

            
            

t = []
degrees = 90
newseed = pickseed()

#loops. check if each pen is on screen, if it isn't, reset, if it is, draw a pattern. when that loop is finished, check how many times it's been looping and if it's too many, pick a new location or save an image and quit

rThing = random.randrange(50,300)
print "--->" + str(rThing)
for each in range(rThing):    
    total = random.randrange(10,50)
    for each in [t1,t2,t3,t4,t5]:
        xpos = each.xcor()
        ypos = each.ycor()
        counter += 1
        if (xpos <= resXlow or xpos >= resXhigh) or (ypos <= resYlow or ypos >= resYhigh):
            xThis = random.randrange(resXlow, resXhigh)
            yThis = random.randrange(resYlow, resYhigh)
            #use lines below for resetting location of pens, line 1 below moves them to different locations, lines 2-6 move them together
            moveto(each,xThis,yThis,0)
            '''moveto(t1,xThis,yThis,0)
            moveto(t2,xThis,yThis,0)
            moveto(t3,xThis,yThis,0)
            moveto(t4,xThis,yThis,0)
            moveto(t5,xThis,yThis,0)'''
            singlecolor(t1, colorchart[0])
            singlecolor(t2, colorchart[1])
            singlecolor(t3, colorchart[2])
            singlecolor(t4, colorchart[3])
            singlecolor(t5, colorchart[4])
            length = 1
            #uncomment for new pattern each reset
            #newseed = pickseed()
        else:
            pickrandom(each, length, degrees, newseed)
            length += 1
            

    
    #if pattern gets too long, moves to random location and rests length
    if length >= total:
        xThis = random.randrange(resXlow, resXhigh)
        yThis = random.randrange(resYlow, resYhigh)
        moveto(t1,xThis,yThis,0)
        moveto(t2,xThis,yThis,0)
        moveto(t3,xThis,yThis,0)
        moveto(t4,xThis,yThis,0)
        moveto(t5,xThis,yThis,0)
        length = 1

timestamp = time.strftime('%y%j%I%H%M%S')
newname = ''
for each in newseed:
	newname += each
canvasvg.saveall(newname + timestamp + ".svg", turtle.getcanvas())
print ('saved ' + newname + timestamp + '.svg')        
print ('fin')
#turtle.mainloop()

os.kill(os.getppid(), signal.SIGHUP)




 
